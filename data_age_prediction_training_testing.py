# -*- coding: utf-8 -*-
"""Big Data Challenge Satria Data_AGE Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yZNCnKDjMK5fhEctNuMJUmTFaX60GYvZ
"""

from google.colab import drive
drive.mount('/content/drive')

#melihat versi tensorflow
import tensorflow as tf
print(tf.__version__)

# melakukan ekstraksi pada file zip
import zipfile,os
local_zip = '/content/drive/MyDrive/DataOfBDC/DataOfBDC.zip'

zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/drive/MyDrive/DataOfBDC')
zip_ref.close()

base_dir = '/content/drive/MyDrive/DataOfBDC/BaseDir'

#Outputnya ada 3 ( Umur, Train, Val )
os.listdir(base_dir)

#membuat file direktori
umur_directory = os.path.join(base_dir, 'UMUR')

!pip install split-folders
import splitfolders

#melakukan split pada file
splitfolders.ratio('/content/drive/MyDrive/DataOfBDC/BaseDir', output='/content/drive/MyDrive/DataOfBDC/BaseDir', seed=1337, ratio=(0.8, 0.2))

train = "/content/drive/MyDrive/DataOfBDC/BaseDir/train"
val = "/content/drive/MyDrive/DataOfBDC/BaseDir/val"

#Bagian pria diganti dengna satu folder yang [x,y] sama , y = umur
train_umur_dt = os.path.join(train, 'UMUR')
val_umur_dt = os.path.join(val, 'UMUR')

# train_wanita_dt = os.path.join(train, 'WANITA')
# val_wanita_dt = os.path.join(val, 'WANITA')

#mengecek apakah bisa di split, pria_dt diganti yang satu folder bagian age
os.listdir(train_umur_dt)

# from PIL import Image
  
  
# # sample.png is the name of the image
# # file and assuming that it is uploaded
# # in the current directory or we need
# # to give the path
# image = Image.open('/content/drive/MyDrive/DataOfBDC/BaseDir/UMUR/6_3.jpg')
  
# # summarize some details about the image
# print(image.format)
# print(image.size)
# print(image.mode)

#augmentasi gambar
# from tensorflow.keras.preprocessing.image import ImageDataGenerator

# train_datagen = ImageDataGenerator(
#                     rescale=1./255,
#                     rotation_range=20,
#                     horizontal_flip=True,
#                     shear_range = 0.2,
#                     fill_mode = 'nearest')
 
# test_datagen = ImageDataGenerator(
#                     rescale=1./255,
#                     rotation_range=20,
#                     horizontal_flip=True,
#                     shear_range = 0.2,
#                     fill_mode = 'nearest')

#image data generator

# train_generator = train_datagen.flow_from_directory(
#         train, 
#         target_size=(150, 150),  
#         batch_size= 32,
#         shuffle=True,
#         subset = "training",
#         class_mode=None)
 
# validation_generator = test_datagen.flow_from_directory(
#         val, # direktori data validasi
#         target_size=(150, 150),
#         batch_size= 32,
#         shuffle=True,
#         class_mode=None)

import pandas as  pd
target = pd.read_csv('/content/drive/MyDrive/DataOfBDC/train.csv') 
target.head()

# Import the necessary libraries : contoh
from PIL import Image
from numpy import asarray
  
  
# load the image and convert into 
# numpy array
img = Image.open('/content/drive/MyDrive/DataOfBDC/BaseDir/UMUR/1_3.jpg')
img_new = img.resize((200,200))
numpydata = asarray(img_new)

# data
#print(numpydata)
 
print(img.size)

# buat usia per nomer
usia_new = list()
for i in range(1,771):
  for j in range(1,4):
    usia_new.append(target['usia'][i-1])


len(usia_new)

#

# convert image to pixel numpy array and resize image

var_dum = list()
for i in range(1,771):
  for j in range(1,4):
    img = Image.open(f'/content/drive/MyDrive/DataOfBDC/BaseDir/UMUR/{i}_{j}.jpg')
    img = img.resize((150,150))
    var_dum.append(asarray(img))

#var_dum

# define data X dan Y

import numpy as np

data_x = np.array(var_dum)/255

print(data_x)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
data_y = scaler.fit_transform(np.array(usia_new).reshape(-1,1))
data_y
print(data_y)

np.unique(data_y)

(usia_new)

from sklearn.utils import shuffle
import numpy as np

data_x, data_y = shuffle(data_x, data_y)
print(data_x)
print(data_y)

#Densenya diganti 1 (karena regression), bisa diganti softmax -> relu
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (2,2), activation='relu', input_shape=(150, 150,3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (2,2), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (2,2), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(256, (2,2), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(1, activation='softmax')
])

# compile model dengan 'adam' optimizer loss function 'binary_crossentropy'
model.compile(loss='mse',
              optimizer=tf.optimizers.Adam(),
              metrics=['mae'])

#membuat callback agar menghentikan epoch bila akurasi sesuai dengan yang diinginkan
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy') >0.9 and logs.get('val_accuracy') > 0.9):
      print("\nAkurasi telah mencapai >90%!")
      self.model.stop_training = True
callbacks = myCallback()

model.fit(data_x, data_y, epochs=25)

# load data test
nama_test = os.listdir('/content/drive/MyDrive/DataOfBDC/DataTesting/Testing') # output list
nama_test

# convert pixel dan resize
data_test=list()
for i in nama_test:
  img = Image.open(f'/content/drive/MyDrive/DataOfBDC/DataTesting/Testing/{i}')
  img = img.resize((150,150))
  data_test.append(asarray(img))

data_test = np.array(data_test)/255
# return pixel numpy array per gambar

# return umur 
hasil_predict = model.predict(data_test)
print(hasil_predict)

# re convert umur : hasil_predict 

umur = scaler.inverse_transform(hasil_predict)
# return umur scale asli

import pandas as pd
hasil_fix = pd.DataFrame({
    'id':nama_test,
    'usia':umur.flatten()
})
hasil_fix.head()

# save to csv
hasil_fix.to_csv('/content/drive/MyDrive/DataOfBDC/subm.csv')